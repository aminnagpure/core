{
    // Configure hostname to announce to the network. Must be a FQDN pointing to this node.
    // Possible values: any fully-qualified domain name.
    host: "my.domain",

    // Specifies which port to listen on for connections.
    // Possible values: any valid port number
    // Default: 8080.
    //port: 8080,

    // Certificate file and private key file to use for the TLS secured server.
    tls: {
        cert: "./my.domain.cer",
        key: "./my.domain.key"
    },

    // Set up a dumb node. Other nodes will not be able to connect to this node, but you may connect to others.
    // Obsoletes TLS and hostname configuration.
    // Possible values: "no", "yes"
    // Default: "no"
    //dumb: "no",

    // Specify the type of node to run.
    // Possible values: "full", "light", "nano"
    // Default: "full"
    //type: "full",

    // Specify the network to connect to.
    // Possible values: "main", "test", "dev", "bounty"
    // Default: "main"
    //network: "test",

    // Run in passive mode: do not connect to other peers and wait for them to connect to you.
    // Possible values: "no", "yes"
    // Default: "no"
    //passive: "yes",

    // Configure the miner on this node.
    miner: {
        // Activate mining on this node.
        // Possible values "no", "yes"
        // Default "no"
        //enabled: "yes",

        // Number of threads to use for mining. Set to "auto" to automatically use number of cores
        // of the device's processor.
        // Possible values: "auto", any number of threads
        // Default: "auto"
        //threads: 1,

        //throttleAfter: Infinity,
        //throttleWait: 100,
    },

    // Configure the JSON-RPC server.
    rpcServer: {
        // Start the JSON-RPC server.
        // Possible values "no", "yes"
        // Default "no"
        //enabled: "yes",

        // TCP-Port to use to create a listening socket for the JSON-RPC server.
        // Possible values: any valid port number
        // Default: 8648
        //port: 8648,
    },

    // Configure Prometheus-compatible metrics server.
    metricsServer: {
        // Start the metrics server.
        // Possible values "no", "yes"
        // Default "no"
        //enabled: "yes",

        // TCP-Port to use to create a listening socket for the metrics server.
        // Possible values: any valid port number
        // Default: 8649
        //port: 8649,

        // Declare a password required to access the metrics server.
        // Default: none
        //password: "secret",
    },

    // Specify the wallet to use.
    wallet: {
        // Use a wallet initialized from a wallet seed.
        // Default: none
        //seed: "seed",

        // Use a wallet by it's address. The specified wallet cannot be used to sign transactions.
        // Default: none
        //address: "NQ42 XX...",
    },

    // Configure log output. All output will go to STDOUT.
    log: {
        // Configure global log level.
        // Possible values: "trace", "verbose", "debug", "info", "warning", "error", "assert"
        // Default: "info"
        //level: "verbose",

        // Define specific log levels for tags
        // Default: none
        //tags: {"BaseConsensus": "debug"},
    }
}
