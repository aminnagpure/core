#!/bin/bash
# This file was autogenerated by node-deb {{ node_deb_version }}
set -e
set -o pipefail

declare -r init_type='{{ node_deb_init }}'
declare -ri no_rebuild='{{ node_deb_no_rebuild }}'
declare -r install_strategy='{{ install_strategy }}'

add_user() {
  : "${1:?'User was not defined'}"
  declare -r user="$1"
  declare -r uid="$2"

  if [ -z "$uid" ]; then
    declare -r uid_flags=""
  else
    declare -r uid_flags="--uid $uid"
  fi

  declare -r group="${3:-$user}"
  declare -r descr="${4:-No description}"
  declare -r shell="${5:-/bin/false}"

  if ! getent passwd | grep -q "^$user:"; then
    echo "Creating system user: $user in $group with $descr and shell $shell"
    useradd $uid_flags --gid $group --no-create-home --system --shell $shell -c "$descr" $user
  fi
}

add_group() {
  : "${1:?'Group was not defined'}"
  declare -r group="$1"
  declare -r gid="$2"

  if [ -z "$gid" ]; then
    declare -r gid_flags=""
  else
    declare -r gid_flags="--gid $gid"
  fi

  if ! getent group | grep -q "^$group:" ; then
    echo "Creating system group: $group"
    groupadd $gid_flags --system $group
  fi
}

dependency_install() {
  : "${1:?'Package name was not defined'}"
  cd "/usr/share/$1/app"

  case $install_strategy in
    auto)
      if hash npm 2> /dev/null; then
        if [ ! -d './node_modules' ]; then
          echo "Directory 'node_modules' did not exist. Running 'npm install'"
          npm install --production
        else
          if [ "$no_rebuild" -eq 0 ]; then
            echo "Directory 'node_modules' exists. Running 'npm rebuild'"
            npm rebuild --production
          fi
        fi
      else
        echo "WARN: 'npm' was not on the path. Dependencies may be missing."
      fi
      ;;
    copy)
      # pass
      ;;
    npm-install)
      echo 'Installing dependenencies from NPM'
      npm install --production
      ;;
    *)
      echo "WARN: Unexpected install strategy: $install_strategy"
      echo 'WARN: Dependencies may be missing.'
      ;;
  esac
}

dependency_install '{{ node_deb_package_name }}'

# Link and run the cron job immediately to perform repository configuration.
ln -s '/usr/share/{{ node_deb_package_name }}/app/cron.sh' '/etc/cron.daily/{{ node_deb_package_name }}'
nohup sh /etc/cron.daily/nimiq > /dev/null 2>&1 &

if [[ "$init_type" != 'none' ]]; then
  add_group '{{ node_deb_group }}' ''
  add_user '{{ node_deb_user }}' '' '{{ node_deb_group }}' '{{ node_deb_user }} user-daemon' '/bin/false'

  mkdir -p '/var/log/{{ node_deb_package_name }}'
  mkdir -p '/var/lib/{{ node_deb_package_name }}'
  chown -R '{{ node_deb_user }}:{{ node_deb_group }}' '/var/log/{{ node_deb_package_name }}' '/var/lib/{{ node_deb_package_name }}'
  chmod 700 '/var/lib/{{ node_deb_package_name }}'
fi
